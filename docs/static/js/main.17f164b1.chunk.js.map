{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","cate","onSubmit","className","type","value","onChange","target","onClick","getGif","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","titleCurrent","src","alt","substring","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAOMC,EAAe,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKtB,OACI,uBAAMO,SAAWN,EAAjB,UACI,sEACA,sBAAKO,UAAU,SAAf,UACI,uBACIC,KAAK,OACLC,MAAQX,EACRY,SArBU,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,UAsBf,wBAAQG,QAASZ,EAAjB,2B,+BC9BHa,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,iDACqCC,UAAUH,GAD/C,+DAEKI,MAAMF,GAFX,cAEZG,EAFY,gBAGGA,EAASC,OAHZ,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATxB,kBAaXM,GAbW,4CAAH,sDCENO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAEhCK,EAFaJ,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAUtC,OACI,sBAAKT,UAAU,yDAAf,UACI,qBAAKwB,IAAMf,EAAMgB,IAAMN,IACvB,mCAXUI,EAWKJ,EAVhBI,EAAa1B,OAAS,KACrB0B,EAAeA,EAAaG,UAAU,EAAG,IACzCH,GAAgB,OAEbA,GAMH,WCVCI,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAEtB,ECJwB,SAAEA,GAC1B,MAA0BjB,mBAAS,CAC/BwB,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAVAC,qBAAW,WACPzB,EAAOC,GACFyB,MAAK,SAAAC,GACFH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAGtB,CAAErB,IAEEsB,EDhBwBK,CAAa3B,GAAhCa,EAAZ,EAAON,KAAac,EAApB,EAAoBA,QAapB,OACI,qCACI,mCAAOrB,EAAP,OAECqB,GAAW,mBAAG5B,UAAU,mDAAb,qBAEZ,qBAAKA,UAAU,iBAAf,SACI,oBAAIA,UAAU,YAAd,SACMoB,EAAOJ,KAAK,SAAEC,GAAF,OACV,cAAC,EAAD,eAESA,GADCA,EAAIC,eEcvBiB,EAxCM,WAGjB,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAkBA,OACI,qCACI,6DACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ+C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MC7BlC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.17f164b1.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    // preventDefault evita que el navegador recarge\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cate => [inputValue, ...cate] );\r\n            setInputValue('');\r\n        }\r\n        // console.log('submit hecho');\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <label>¿Que imágenes desea buscar?</label>\r\n            <div className=\"inputs\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={ inputValue }\r\n                    onChange={ handleInputChange }\r\n                />\r\n                <button onClick={handleSubmit}>Buscar</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}","export const getGif = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=exdehC09BXzFZ7QmBq0fiBxd9g2hmqCp`;\r\n    const response = await fetch(url);\r\n    const {data} = await response.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    const titleImg = (titleCurrent) =>{\r\n        if(titleCurrent.length > 20){\r\n            titleCurrent = titleCurrent.substring(0, 20);\r\n            titleCurrent += \"...\";\r\n        }\r\n        return titleCurrent;\r\n    }\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce animate__fadeIn\">\r\n            <img src={ url } alt={ title }/>\r\n            <p> { titleImg(title) } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React /*, { useState, useEffect }*/ from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGif } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    /**\r\n    const [images, setImages] = useState([])\r\n    \r\n    // Se emplea este código para que el componente sea renderizado\r\n    // solo una unica vez, o cada vez que cambia el category\r\n    useEffect( () => {\r\n        getGif(category)\r\n            .then(setImages);\r\n    }, [category]);\r\n    */\r\n\r\n    return (\r\n        <>\r\n            <h3> { category } </h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__bounce animate__flash\">Loading</p>}\r\n\r\n            <div className=\"container-grid\">\r\n                <ol className=\"card-grid\">\r\n                    { images.map( ( img ) => (\r\n                        <GifGridItem\r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))}\r\n                </ol>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGif } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // const [images, setImages] = useState([])\r\n    \r\n    // Se emplea este código para que el componente sea renderizado\r\n    // solo una unica vez, o cada vez que cambia el category\r\n    useEffect( () => {\r\n        getGif(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n    }, [ category ] );\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One punch']);\r\n\r\n    /**\r\n    // Agregar un nuevo contenido al arreglo\r\n    const handLeAdd = () => {\r\n        // Agregar el contenido al final del arreglo\r\n        // setCategories( [...categories, 'One Piece'] );\r\n\r\n        // Agregar el contenido al inicio del arreglo\r\n        // setCategories( ['One Piece', ...categories] );\r\n\r\n        // Usando un Callback\r\n        setCategories(cate => [...cate, 'One Piece']);\r\n    }\r\n    */\r\n\r\n    // Cuando se emplea map, debe tener un key Unico\r\n    // <> </> es un fragment, puede emplear tambien un div\r\n    return (\r\n        <>\r\n            <h1>Galeria de Imágenes GIFS</h1>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr></hr>\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid\r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}